{"version":3,"sources":["serviceWorker.js","AboutPage.js","ResumePage.js","index.js"],"names":["Boolean","window","location","hostname","match","AboutPage","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","React","Component","ResumePage","ProjectDescription","ProjectCard","src","alt","src_ProjectDescription","Base","id","src_ProjectCard","PageContainer","src_Base","AboutPage_AboutPage","ResumePage_ResumePage","ReactDOM","render","src_PageContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBC,IAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEI,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,8BAZRf,EAAA,CAA+BiB,IAAMC,WCAxBC,EAAb,SAAAlB,GAAA,SAAAkB,IAAA,OAAAjB,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,GAAAjB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAiB,EAAAlB,GAAAC,OAAAQ,EAAA,EAAAR,CAAAiB,EAAA,EAAAR,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,gEALRI,EAAA,CAAgCF,IAAMC,WCShCE,mLAEF,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,qCAPyBE,IAAMC,WAajCG,mLAEF,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKO,IAAI,IAAIC,IAAI,oCACjBV,EAAAC,EAAAC,cAACS,EAAD,cALkBP,IAAMC,WAW1BO,mLAEF,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,GAAG,QACNb,EAAAC,EAAAC,cAAA,MAAIW,GAAG,gBAAP,2BACAb,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACY,EAAD,cARWV,IAAMC,WAcnBU,mLAEF,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,cANoBd,IAAMC,WAalCc,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAAmBC,SAASC,eAAe,SHmErD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f0879629.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nexport class AboutPage extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className=\"container\">\r\n      <h1>About Me</h1>\r\n      <p>I am....someone</p>\r\n      <p>Not just Anyone</p>\r\n      <p>Not No one</p>\r\n      <h2>Technologies Used:</h2>\r\n      <ul>\r\n        <li>PYTHON</li>\r\n        <li>HTML</li>\r\n        <li>JAVASCRIPT</li>\r\n      </ul>\r\n    </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport class ResumePage extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className=\"container\">\r\n        <h1> HERE IS MY RESUME</h1>\r\n        <h2>Click the link to see the pdf in Google Drive</h2>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './main.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AboutPage } from './AboutPage';\nimport { ResumePage } from './ResumePage';\n\n// Each projects description should include:\n// Description, technologies used, a deployment link button, a source link button\nclass ProjectDescription extends React.Component {\n  render() {\n    return (\n      <div className=\"project-desc\">\n        <h1> Project Description here</h1>\n        <h2>Technologies used</h2>\n        <a> view source</a>\n        <a> view deployment</a>\n      </div>\n    );\n  }\n}\n// // This is the container for the 'card' that will display each project in my list\nclass ProjectCard extends React.Component {\n  render() {\n    return (\n      <div className=\"project-card\">\n        <img src=\"#\" alt=\"Project screenshot will go here\" />\n        <ProjectDescription />\n      </div>\n    );\n  }\n}\n\nclass Base extends React.Component {\n  render() {\n    return (\n      <div id=\"base\">\n        <h1 id=\"the-css-test\">Checking that CSS works</h1>\n        <ProjectCard />\n        <ProjectCard />\n        <ProjectCard />\n        <ProjectCard />\n      </div>\n    );\n  }\n}\n\nclass PageContainer extends React.Component {\n  render() {\n    return (\n      <div>\n        <Base />\n        <AboutPage />\n        <ResumePage />\n\n      </div>\n    );\n\n  }\n}\nReactDOM.render(<PageContainer />, document.getElementById('root'));\n// ReactDOM.render(<Base />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}