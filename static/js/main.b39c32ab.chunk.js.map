{"version":3,"sources":["serviceWorker.js","AboutPage.js","ContactPage.js","ResumePage.js","index.js"],"names":["Boolean","window","location","hostname","match","AboutPage","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","React","Component","ContactPage","id","href","ResumePage","ProjectDescription","props","_this","call","state","myProjects","name","description","techUsed","source","deployment","ProjectCard","src","alt","src_ProjectDescription","Base","src_ProjectCard","PageContainer","src_Base","AboutPage_AboutPage","ResumePage_ResumePage","ContactPage_ContactPage","univiewdatabase","library","formvalidation","weatherapp","myportfolio","restaurantpage","planckdisplay","ReactDOM","render","src_PageContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBC,IAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEI,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,aACAH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,+GAIAF,EAAAC,EAAAC,cAAA,uFAIAF,EAAAC,EAAAC,cAAA,gHAIAF,EAAAC,EAAAC,cAAA,sHAIAF,EAAAC,EAAAC,cAAA,wDAGJF,EAAAC,EAAAC,cAAA,6BACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,eACjBH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAAA,sEACAF,EAAAC,EAAAC,cAAA,kEACAF,EAAAC,EAAAC,cAAA,+EAGAF,EAAAC,EAAAC,cAAA,gHAtCZf,EAAA,CAA+BiB,IAAMC,WCAxBC,EAAb,SAAAlB,GAAA,SAAAkB,IAAA,OAAAjB,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,GAAAjB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAiB,EAAAlB,GAAAC,OAAAQ,EAAA,EAAAR,CAAAiB,EAAA,EAAAR,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,2BACAH,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAAA,WAASK,GAAG,eACVP,EAAAC,EAAAC,cAAA,mBACS,IACPF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,iCAAR,0BAEFR,EAAAC,EAAAC,cAAA,oBACU,IACRF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,kCAAR,kCAEK,KAEPR,EAAAC,EAAAC,cAAA,sBACY,IACVF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,8CAAR,gDAKJR,EAAAC,EAAAC,cAAA,qDA1BRI,EAAA,CAAiCF,IAAMC,WCA1BI,EAAb,SAAArB,GAAA,SAAAqB,IAAA,OAAApB,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,GAAApB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAoB,EAAArB,GAAAC,OAAAQ,EAAA,EAAAR,CAAAoB,EAAA,EAAAX,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,2BACAH,EAAAC,EAAAC,cAAA,iBAEEF,EAAAC,EAAAC,cAAA,WAFF,yBAGyB,IACvBF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,sFAAR,qBAIFR,EAAAC,EAAAC,cAAA,oEAdRO,EAAA,CAAgCL,IAAMC,eCwBhCK,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAvB,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACjBE,EAAAvB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAG,KAAAtB,KAAMoB,KACDG,MAAQC,EAAWH,EAAKD,MAAMK,MAFlBJ,yEAKjB,OAAOrB,KAAKuB,MAAME,sCAGlB,IAAIA,EAAOzB,KAAKuB,MAAME,KAClBC,EAAc1B,KAAKuB,MAAMG,YACzBC,EAAW3B,KAAKuB,MAAMI,SACtBC,EAAS5B,KAAKuB,MAAMK,OACpBC,EAAa7B,KAAKuB,MAAMM,WAC5B,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAKc,GACLhB,EAAAC,EAAAC,cAAA,SAAIe,GACJjB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,+BAAsBF,EAAAC,EAAAC,cAAA,YAAzB,IAAqCgB,EAArC,KACAlB,EAAAC,EAAAC,cAAA,KAAGM,KAAMW,GAAT,gBACAnB,EAAAC,EAAAC,cAAA,KAAGM,KAAMY,GAAT,4BApByBhB,IAAMC,WA0BjCgB,mLAKF,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKoB,IAAI,IAAIC,IAAI,oCACjBvB,EAAAC,EAAAC,cAACsB,EAAD,CAAoBR,KAAMzB,KAAKoB,MAAMK,eARnBZ,IAAMC,WAc1BoB,mLAEF,OACEzB,EAAAC,EAAAC,cAAA,OAAKK,GAAG,QACNP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,YACAH,EAAAC,EAAAC,cAACwB,EAAD,CAAaV,KAAK,oBAClBhB,EAAAC,EAAAC,cAACwB,EAAD,CAAaV,KAAK,YAClBhB,EAAAC,EAAAC,cAACwB,EAAD,CAAaV,KAAK,eAClBhB,EAAAC,EAAAC,cAACwB,EAAD,CAAaV,KAAK,kBAClBhB,EAAAC,EAAAC,cAACwB,EAAD,CAAaV,KAAK,gBAClBhB,EAAAC,EAAAC,cAACwB,EAAD,CAAaV,KAAK,mBAClBhB,EAAAC,EAAAC,cAACwB,EAAD,CAAaV,KAAK,2BAXPZ,IAAMC,WAiBnBsB,mLAEF,OACE3B,EAAAC,EAAAC,cAAA,OAAKK,GAAG,YACNP,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,cAPoB3B,IAAMC,WAc9BU,EAAa,CACfiB,gBAAiB,CACfhB,KAAM,mBACNC,YACE,8VACFC,SACE,mJACFC,OAAQ,4CACRC,WAAY,6CAEda,QAAS,CACPjB,KAAM,mBACNC,YACE,ySACFC,SACE,qDACFC,OAAQ,sDACRC,WAAY,6CAEdc,eAAgB,CACdlB,KAAM,2BACNC,YAAa,GACbC,SACE,wBACFC,OAAQ,wDACRC,WAAY,yDAEde,WAAY,CACVnB,KAAM,qBACNC,YACE,+TACFC,SACE,wJACFC,OAAQ,mDACRC,WAAY,oDAEdgB,YAAa,CACXpB,KAAM,uBACNC,YACE,2GACFC,SACE,iDACFC,OAAQ,kDACRC,WAAY,mDAEdiB,eAAgB,CACdrB,KAAM,kBACNC,YAAa,GACbC,SACE,wBACFC,OAAQ,kDACRC,WAAY,mDAEdkB,cAAe,CACbtB,KAAM,8BACNC,YACE,2QACFC,SACE,8DACFC,OAAQ,kDACRC,WAAY,oDAGhBmB,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAAmBC,SAASC,eAAe,SJ/BrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b39c32ab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nexport class AboutPage extends React.Component {\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"subpages-container\">\r\n        <div className=\"subpages-container-border-gradient\"></div>\r\n        <h1 className=\"section-title\">Who Am I?</h1>   \r\n        <h2>What do I do?</h2>\r\n        <div className=\"personal-summary\">  \r\n          <ul>\r\n            <li>\r\n              I am currentlly a Planetarium Presenter II at the California Academy\r\n              of Sciences in San Francisco\r\n            </li>\r\n            <li>\r\n              Talk to people about stars, earthquakes, exoplanets, black holes and\r\n              more\r\n            </li>\r\n            <li>\r\n              Build HTML projects to build science demonstrations and helpful\r\n              tools for the Morrison Planetarium\r\n            </li>\r\n            <li>\r\n              Write documentation for equipment (telescopes, graphene evaporators,\r\n              microscopes) I use and code I write\r\n            </li>\r\n            <li>Dance and keep learning in my spare time</li>\r\n          </ul>\r\n        </div>\r\n        <h2>What Do I Know?</h2>\r\n          <div className = \"skills-list\">\r\n          <ul>\r\n            <li>Languages: Javascript, Python, HTML, CSS</li>\r\n            <li>How to implement APIs such as the Weather API, GIPHY API</li>\r\n            <li>How to use jQuery plugins such as DataTables, MarkJS</li>\r\n            <li>\r\n              How to use version control in Git and test-deploy to Github-Pages\r\n            </li>\r\n            <li>\r\n              How to use Python to harvest data from local directories and produce\r\n              a useful HTML database\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport class ContactPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"subpages-container\">\r\n        <div className=\"subpages-container-border-gradient\"></div>\r\n        <h1 className=\"section-title\">Want to Get in Contact?</h1>\r\n        <div>\r\n        </div>\r\n        <section id=\"contactinfo\">\r\n          <h3>\r\n            Email:{\" \"}\r\n            <a href=\"mailto: hankang.bok@gmail.com\">hankang.bok@gmail.com</a>\r\n          </h3>\r\n          <h3>\r\n            Github:{\" \"}\r\n            <a href=\"https://github.com/kyouyatamax\">\r\n              https://github.com/kyouyatamax\r\n            </a>{\" \"}\r\n          </h3>\r\n          <h3>\r\n            LinkedIn:{\" \"}\r\n            <a href=\"https://www.linkedin.com/in/hankangbokbok/\">\r\n              https://www.linkedin.com/in/hankangbokbok/\r\n            </a>\r\n          </h3>\r\n        </section>\r\n        <p>Thank you for checking out my page!</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport class ResumePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"subpages-container\">\r\n        <div className=\"subpages-container-border-gradient\" />\r\n        <h1 className=\"section-title\">Do I have a PDF Resume?</h1>\r\n        <h3>\r\n          Yes!\r\n          <br />\r\n          My resume is available{\" \"}\r\n          <a href=\"https://drive.google.com/file/d/1MS2WASHiX0ZkqGm_-21dhjG7xRGw_r1z/view?usp=sharing\">\r\n            on Google Drive.\r\n          </a>\r\n        </h3>\r\n        <h3>Embed the pdf into the page when the user selects</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./main.css\";\n// import App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AboutPage } from \"./AboutPage\";\nimport {ContactPage} from \"./ContactPage\";\nimport { ResumePage } from \"./ResumePage\";\n\n\n// TODO: Find a React way to wipe the page and render components when the header\n// Nav buttons are clicked\n// This is a weird, non-react frankenstein solution?\nfunction wipeSlate(objectTarget) {\n  var rootDiv = document.getElementById(\"contents\");\n  while (rootDiv.firstChild) {\n    rootDiv.removeChild(rootDiv.firstChild);\n  }\n  console.log(\"THIS DID WORK?\");\n  const newPage = React.createElement(objectTarget);\n  ReactDOM.render(newPage, document.getElementById(\"contents\"));\n}\n\n// Each projects description should include:\n// Description, technologies used, a deployment link button, a source link button\nclass ProjectDescription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = myProjects[this.props.name];\n  }\n  getName() {\n    return this.state.name;\n  }\n  render() {\n    let name = this.state.name;\n    let description = this.state.description;\n    let techUsed = this.state.techUsed;\n    let source = this.state.source;\n    let deployment = this.state.deployment;\n    return (\n      <div className=\"project-desc\">\n        <h1>{name}</h1>\n        <p>{description}</p>\n        <p><b>Technologies used: <br /></b> {techUsed} </p>\n        <a href={source}> view source</a>\n        <a href={deployment}> view deployment</a>\n      </div>\n    );\n  }\n}\n// // This is the container for the 'card' that will display each project in my list\nclass ProjectCard extends React.Component {\n  render() {\n    // let name = this.props.name;\n    // let reference=myProjects;\n    // console.log(reference.name+\"CHECK\");\n    return (\n      <div className=\"project-card\">\n        <img src=\"#\" alt=\"Project screenshot will go here\" />\n        <ProjectDescription name={this.props.name} />\n      </div>\n    );\n  }\n}\n\nclass Base extends React.Component {\n  render() {\n    return (\n      <div id=\"base\">\n        <h1 className=\"section-title\">Projects</h1>\n        <ProjectCard name=\"univiewdatabase\" />\n        <ProjectCard name=\"library\" />\n        <ProjectCard name=\"weatherapp\" />\n        <ProjectCard name=\"planckdisplay\" />\n        <ProjectCard name=\"myportfolio\" />\n        <ProjectCard name=\"formvalidation\" />\n        <ProjectCard name=\"restaurantpage\" />\n      </div>\n    );\n  }\n}\n\nclass PageContainer extends React.Component {\n  render() {\n    return (\n      <div id=\"contents\">\n        <Base />\n        <AboutPage />\n        <ResumePage />\n        <ContactPage />\n      </div>\n    );\n  }\n}\n// Eventually, make urls standardized so that you dont need to look up a repos URL\n//Project/repo names should be standardized more\nlet myProjects = {\n  univiewdatabase: {\n    name: \"Uniview DataBase\",\n    description:\n      \"Uniview Database is a searchable catalog of digital assets used by the Morrison Planetarium. It scans a users local installation of Uniview 2.0 software using Python, and produces an HTML webpage. Uniview Database expedites and improves planetarium show development. It can be easily implemented by other Uniview 2.0 (Planetarium software) users. \",\n    techUsed:\n      \"ReactJS (JavaScript), DataTables (jQuery Plugin), mark.js (JavaScript)  |  Beautiful Soup (Python HTML Parser), unittest (Python) | FlexBox(CSS)\",\n    source: \"https://github.com/kyouyatamax/UVDatabase\",\n    deployment: \"https://kyouyatamax.github.io/UVDatabase/\"\n  },\n  library: {\n    name: \"Personal Library\",\n    description:\n      \"I tried building this library in React as well as in pure Javascript. In both cases, users can see a library of books with their titles, author names, # of pages, etc. Users can add new books using the Javascript form, check off books as they’re read, and remove books from their library. \",\n    techUsed:\n      \"ReactJS (JavaScript), FlexBox(CSS), Javascript ES6\",\n    source: \"https://github.com/kyouyatamax/jsLibraryOdinProject\",\n    deployment: \"https://kyouyatamax.github.io/UVDatabase/\"\n  },\n  formvalidation: {\n    name: \"Form Validation Practice\",\n    description: \"\",\n    techUsed:\n      \"HTML, CSS, Javascript\",\n    source: \"https://github.com/kyouyatamax/formValidationPractice\",\n    deployment: \"https://kyouyatamax.github.io/formValidationPractice/\"\n  },\n  weatherapp: {\n    name: \"Weather in a Gif-y\",\n    description:\n      \"This webpage uses the Weather API to find out the weather in a users city of choice. In addition, whimsical animated GIFs matching the weather result are displayed using the GIPHY API. Whether you subscribe to the ‘Jiff’ or ‘Gif’ pronunciation, this page can help you check the weather in a GIF. \",\n    techUsed:\n      \"Weather API (JavaScript), GIPHY API (JavaScript), ReactJS (JavaScript),  HTML, CSS, Javascript Highlight API, FlexBox(CSS), DataTables(JQuery Plugin)\",\n    source: \"https://github.com/kyouyatamax/weather-app-hkang\",\n    deployment: \"https://kyouyatamax.github.io/weather-app-hkang/\"\n  },\n  myportfolio: {\n    name: \"My Portfolio Webpage\",\n    description:\n      \"You're looking at it! My personal website uses React, Flexbox, and the source code is at the link below.\",\n    techUsed:\n      \"ReactJS (JavaScript), FlexBox(CSS),  HTML, CSS\",\n    source: \"https://github.com/kyouyatamax/restaurantpageJS\",\n    deployment: \"https://kyouyatamax.github.io/restaurantpageJS/\"\n  },\n  restaurantpage: {\n    name: \"Restaurant Page\",\n    description: \"\",\n    techUsed:\n      \"HTML, CSS, JavaScript\",\n    source: \"https://github.com/kyouyatamax/restaurantpageJS\",\n    deployment: \"https://kyouyatamax.github.io/restaurantpageJS/\"\n  },\n  planckdisplay: {\n    name: \"Planck Touch-Screen Exhibit\",\n    description:\n      \"The Planck Display was a touch-screen exhibit at the Santa Barbara Museum of Natural History (SBMNH). I built in updates (HTML, CSS, JS) to reflect new research data, improve content clarity and accessibility, and add multimedia assets (video, images, slideshows).\",\n    techUsed:\n      \"KRPano (Panoramic Image Viewer for HTML), Python, HTML, CSS\",\n    source: \"https://github.com/kyouyatamax/restaurantpageJS\",\n    deployment: \"https://kyouyatamax.github.io/restaurantpageJS/\"\n  }\n};\nReactDOM.render(<PageContainer />, document.getElementById(\"root\"));\n// ReactDOM.render(<Base />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}